import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import altair as alt
import plotly.express as px
from plotly.subplots import make_subplots
from pygments.lexers import go
import plotly.graph_objs as go
import pygments.lexers.go as go_lexer  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Å–µ–≤–¥–æ–Ω–∏–º


st.set_page_config(
    page_title="GoodSchool",
    page_icon="üìä",
)
st.sidebar.success("–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª")
conn = st.connection('mysql', type='sql')

st.title('–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —à–∫–æ–ª –ú–æ—Å–∫–≤—ã')
agree = st.checkbox('–í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏')
if agree:
    cl_df = conn.query('SELECT * FROM data_segmetation')
    st.dataframe(cl_df)
df = conn.query('SELECT * from moscow_schools;', ttl=600)

pca = conn.query('SELECT * FROM pca_ege')
pca['cluster_label'] = pca['cluster_label'].astype(str)
sorted_labels = sorted(pca['cluster_label'].unique(), key=lambda x: int(x))
st.header('–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è DBSCAN —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–Ω–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏')
# –°–æ–∑–¥–∞–π—Ç–µ –≥—Ä–∞—Ñ–∏–∫ —Å —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏ –ª–µ–≥–µ–Ω–¥—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É tab20
fig = px.scatter(
    pca,
    x="c1",
    y="c2",
    color="cluster_label",
    category_orders={"–ú–µ—Ç–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞": sorted_labels},
    color_discrete_sequence=px.colors.qualitative.Light24
)
fig.update_layout(
    xaxis_title="–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ‚Ññ1",
    yaxis_title="–ì–ª–∞–≤–Ω–∞—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ‚Ññ2",
)
# –û—Ç–æ–±—Ä–∞–∑–∏—Ç–µ –≥—Ä–∞—Ñ–∏–∫ –≤ Streamlit
st.plotly_chart(fig, use_container_width=True)
df['cluster_label'] = pca['cluster_label']
on = st.toggle('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Ç–µ—Ä–∞–º')
if on:
    st.subheader('–í—Å–µ–≥–æ 18 –∫–ª–∞—Å—Ç–µ—Ä–æ–≤, 56 –≤ —Å—Ä–µ–¥–Ω–µ–º —à–∫–æ–ª –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Ç–µ—Ä–µ')
    a = []
    r = 0
    for i in range(-1, len(np.unique(pca['cluster_label']))-1):
        cluster_data = df[df['cluster_label'] == str(i)]
        mean_220 = cluster_data['students_220_and_above'].mean()
        mean_160 = cluster_data['students_above_160'].mean()
        dlina = len(cluster_data)
        most_common_district = cluster_data['district'].mode()[0]
        cluster_info = {
            '–ö–ª–∞—Å—Ç–µ—Ä': i,
            '–ß–∏—Å–ª–æ —à–∫–æ–ª': dlina,
            '–°—Ä–µ–¥–µ–µ —á–∏—Å–ª–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–¥–∞–≤—à–∏—Ö –ï–ì–≠ >= 220 –±–∞–ª–ª–æ–≤': mean_220,
            '–°—Ä–µ–¥–µ–µ —á–∏—Å–ª–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–¥–∞–≤—à–∏—Ö –ï–ì–≠ > 160 –±–∞–ª–ª–æ–≤': mean_160,
            '–°–∞–º—ã–π —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞—é—â–∏–π—Å—è —Ä–∞–π–æ–Ω': most_common_district,
        }
        a.append(cluster_info)

# –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π
    clusters_df = pd.DataFrame(a)
    st.dataframe(clusters_df)
    clusters = list(np.unique(pca['cluster_label']))
    mean_220_values = [item['–°—Ä–µ–¥–µ–µ —á–∏—Å–ª–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å–¥–∞–≤—à–∏—Ö –ï–ì–≠ >= 220 –±–∞–ª–ª–æ–≤'] for item in a]

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –≥—Ä—É–ø–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –æ–¥–Ω–∏–º —Ä—è–¥–æ–º –∏ –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π
    fig = make_subplots(rows=1, cols=1)

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –≤ –ø–µ—Ä–≤—ã–π —Ä—è–¥ –∏ –ø–µ—Ä–≤—É—é –∫–æ–ª–æ–Ω–∫—É –≥—Ä—É–ø–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig.add_trace(
        go.Bar(
            x=clusters,
            y=mean_220_values,
            marker=dict(color='blueviolet')
        ),
        row=1, col=1
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫–µ—Ç –¥–ª—è –≤—Å–µ–π –≥—Ä—É–ø–ø—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig.update_layout(
        title='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–º—É –∫–ª–∞—Å—Ç–µ—Ä—É',
        xaxis=dict(title='–ú–µ—Ç–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∞'),
        yaxis=dict(title='–°—Ä–µ–¥–Ω–µ–µ —á–∏—Å–ª–æ –ª—é–¥–µ–π —Å–¥–∞–≤—à–∏—Ö –ï–ì–≠ >= 220 –±–∞–ª–ª–æ–≤'),
        showlegend=False,

    )
    st.plotly_chart(fig, use_container_width=True)

cluster_labels = df['cluster_label'].unique()


sample_size = st.slider('–†–∞–∑–º–µ—Ä –≤—ã–±–æ—Ä–∫–∏', 1, 100, 10)


selected_cluster = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Ç–µ—Ä', cluster_labels)


sample = df[df['cluster_label'] == selected_cluster].sample(n=sample_size)


st.dataframe(sample)

if 'label_changes' not in st.session_state:
    st.session_state['label_changes'] = {}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Ç–æ–∫
def update_label_name():
    current_label = st.session_state.current_label
    new_label = st.session_state.new_label
    if current_label and new_label:
        st.session_state.label_changes[current_label] = new_label
        st.success(f"–ú–µ—Ç–∫–∞ '{current_label}' –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{new_label}'")
        st.session_state.current_label = ""
        st.session_state.new_label = ""


# –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤
cluster_labels = pca['cluster_label'].unique()

# –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø–æ–ª—è –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–∫–∏
with st.form("label_form"):
    st.text_input("–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–∫–∏", key="current_label")
    st.text_input("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–∫–∏", key="new_label")
    submitted = st.form_submit_button("–û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", on_click=update_label_name)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ DataFrame
for current_label, new_label in st.session_state.label_changes.items():
    pca.loc[pca['cluster_label'] == current_label, 'cluster_label'] = new_label

# –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–µ—Ç–æ–∫
fig = px.scatter(
    pca,
    x="c1",
    y="c2",
    color="cluster_label",
    title="PCA –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏",
    color_discrete_sequence=px.colors.qualitative.Light24
)

# –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ Streamlit
st.plotly_chart(fig, use_container_width=True)
